# EXP 1(C) : Analysis of audio signal for noise removal

# AIM: 

# To analyse an audio signal and remove noise

# APPARATUS REQUIRED:  
PC installed with SCILAB. 

# PROGRAM: 
```# EXP 1(C) : Analysis of audio signal for noise removal

# Step 1: Import libraries
from google.colab import files
from scipy.io import wavfile
import numpy as np
import matplotlib.pyplot as plt

# Step 2: 
print("dog bark sound .wav audio file")
uploaded = files.upload()

# Step 3: Get uploaded file name
filename = list(uploaded.keys())[0]
print("Uploaded file:", filename)

# Step 4: Read the audio file
fs, data = wavfile.read(filename)  # fs = sampling rate
if data.ndim > 1:  # If stereo, take one channel
    data = data[:, 0]

# Step 5: Plot original audio
time = np.linspace(0, len(data)/fs, num=len(data))
plt.figure(figsize=(10, 3))
plt.plot(time, data)
plt.title("Original Audio Signal")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.grid(True)
plt.show()

# Step 6: Apply DFT to analyze frequencies
data_fft = np.fft.fft(data)
freq = np.fft.fftfreq(len(data), d=1/fs)

# Step 7: Plot frequency spectrum
plt.figure(figsize=(10, 3))
plt.plot(freq[:len(freq)//2], np.abs(data_fft)[:len(freq)//2])
plt.title("Frequency Spectrum of Original Audio")
plt.xlabel("Frequency [Hz]")
plt.ylabel("Magnitude")
plt.grid(True)
plt.show()

# Step 8: Noise removal (simple threshold method)
# Zero out frequencies with very small magnitude (assume they are noise)
threshold = 0.05 * np.max(np.abs(data_fft))
data_fft_clean = np.where(np.abs(data_fft) > threshold, data_fft, 0)

# Step 9: Convert back to time domain
data_clean = np.fft.ifft(data_fft_clean).real

# Step 10: Plot cleaned audio
plt.figure(figsize=(10, 3))
plt.plot(time, data_clean)
plt.title("Cleaned Audio Signal")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.grid(True)
plt.show()

# Step 11: Save cleaned audio
wavfile.write("cleaned_audio.wav", fs, data_clean.astype(np.int16))
print("Cleaned audio saved as 'cleaned_audio.wav'")
```
OUTPUT:



// DISCRETE FOURIER TRANSFORM 

# RESULT: 
